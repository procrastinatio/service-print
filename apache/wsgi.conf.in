#
# The Apache mod_wsgi configuration file.
#
# We use mod_wsgi's daemon mode. And we assign a specific process
# group to the WSGI application.
#
# Note: once we use mod_wsgi 3 we'll be able to get rid of the
# Location block by passing process-group and application-group
# options to the WSGIScriptAlias directive.
#

RewriteEngine on
ExpiresActive on

# Enabling CORS
Header set Access-Control-Allow-Origin "*"
Header always set Access-Control-Allow-Methods "POST, GET, OPTIONS"
Header always set Access-Control-Allow-Headers "X-Requested-With, content-type"

AddOutputFilterByType DEFLATE text/css
AddOutputFilterByType DEFLATE application/x-javascript application/javascript application/json application/xml
AddOutputFilterByType DEFLATE text/html text/plain text/xml

# uncomment this if you need HTTP authentication/authorization to work (with
# repoze.who or any other security toolkit), see the Apache mod_wsgi FAQ to
# understand why mod_wsgi doesn't pass the user credentials to the WSGI
# application by default.
# http://code.google.com/p/modwsgi/wiki/FrequentlyAskedQuestions#Access_Control_Mechanisms
WSGIPassAuthorization On

# Static files with aggressive cache:
RewriteRule ^${apache_entry_path}[0-9\/]*static/(.*)$  ${buildout:directory/chsdi/static/$1}

# Entry for doc
RewriteRule ^${apache_entry_path}?$  ${apache_entry_path}doc [R,QSA]
RewriteRule ^${apache_entry_path}doc/examples(.*)$  ${buildout:directory}/chsdi/static/doc/examples$1 [S=1]
RewriteRule ^${apache_entry_path}doc(.*)$  ${buildout:directory}/chsdi/static/doc/build/$1

<IfModule mod_headers.c>
  Header set X-UA-Compatible "IE=Edge"
</IfModule>

<LocationMatch "^${apache_entry_path}[0-9]+/static/">
    ExpiresDefault "now plus 1 year"
    Header merge Cache-Control "public"
    Header unset Etag
</LocationMatch>

# Static for cross domain flash/arcgis
<LocationMatch "^${apache_entry_path}static/(crossdomain.xml|clientaccesspolicy.xml)">
    Header set Content-type "text/x-cross-domain-policy"
</LocationMatch>
RewriteRule ^${apache_entry_path}(crossdomain.xml|clientaccesspolicy.xml) ${apache_entry_path}static/$1 [PT]

# Robots static files
<LocationMatch "^${apache_entry_path}static/(robots.txt|robots_prod.txt)">
    Header set Content-type "text/plain"
</LocationMatch>
RewriteRule ^${apache_entry_path}robots.txt ${apache_entry_path}static/${robots_file} [PT]


# WMTS
RewriteRule ^${apache_entry_path}1.0.0/WMTSCapabilities\.xml$ ${apache_entry_path}rest/services/api/1.0.0/WMTSCapabilities.xml [PT,NC,QSA,L]

# Frozen Capabilities, for swissmaponline 
RewriteCond %{QUERY_STRING} lang=(de|fr|it|en) [NC] 
RewriteRule ^${apache_entry_path}1.0.0/WMTSCapabilities_v([0-9]{8})\.xml$ ${buildout:directory}/chsdi/static/capabilities/$1/WMTSCapabilities.%1.xml [NC,QSA,L]
RewriteRule ^${apache_entry_path}1.0.0/WMTSCapabilities_v([0-9]{8})\.xml$ ${buildout:directory}/chsdi/static/capabilities/$1/WMTSCapabilities.de.xml [NC,QSA,L]


# Proxy pass pointing on api.geo.admin.ch project
RewriteRule ^${apache_entry_path}(shorten|shorten.json)(.*)$ http://api.geo.admin.ch/$1$2 [P]

# Proxy pass for geodesy services
RewriteRule ^${apache_entry_path}reframe/lv03tolv95(.*)$ http://tc-geodesy.bgdi.admin.ch/reframe/lv03tolv95$1 [P]

# If URI has numbers at the start, we cache a year
# This allows a client to create their own cache and
# update at his discretion
RewriteRule ^${apache_entry_path}[0-9]+/(.*)$ ${apache_entry_path}$1 [PT,E=${vars:apache_base_path}setyearcache:true] 
Header merge Cache-Control "max-age=31536013, public" env=${vars:apache_base_path}setyearcache


# define a process group
# WSGIDaemonProcess, default are 1 process and 15 threads
WSGIDaemonProcess mf-chsdi3:${vars:apache_base_path} display-name=%{GROUP} user=${vars:modwsgi_user} threads=${vars:wsgi_threads}

# define the path to the WSGI app
WSGIScriptAlias ${apache_entry_path} ${buildout:directory}/buildout/parts/modwsgi/wsgi

# assign the WSGI app instance the process group defined aboven, we put the WSGI
# app instance in the global application group so it is always executed within
# the main interpreter
<LocationMatch ^${apache_entry_path}>
    # WSGIProcessGroup must be commented/removed when running the project on windows
    WSGIProcessGroup mf-chsdi3:${vars:apache_base_path}
    WSGIApplicationGroup %{GLOBAL}

    Order allow,deny
    Allow from all
</LocationMatch>

# We rewrite loader to versioned loader, which is cached
RewriteRule ^${apache_entry_path}loader.js$ ${apache_entry_path}${app_version}/uncached_loader.js [P]
<LocationMatch ^${apache_entry_path}loader.js>
    Header unset Cache-Control
    Header merge Cache-Control "no-cache"
</LocationMatch>

# Big & ugly regex to match everything that is handled by pylons (everything!) in this 'apache_entry_path'
RewriteRule ^${apache_entry_path}[0-9\/]*(qrcodegenerator|owschecker|iipimage|luftbilder|search|index|genindex|examples|img|js|css|releasenotes|services|_sources|_static|api|rest/services|ogcproxy|testi18n|uncached_loader.js|loader.js|snapshot|checker|checker_dev|static|print|dev|feedback|sitemap|doc)(.*)$ ${apache_entry_path}$1$2 [PT]



# Some services are not "free": control is done at varnish level
<LocationMatch ^${apache_entry_path}rest/(height|profile)>
   Order Deny,Allow
   Allow from all
</LocationMatch>
